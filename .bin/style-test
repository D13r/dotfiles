#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail

# Load the function version to avoid the overhead of calling a script
# This reduces runtime from ~7s to ~3s
source "$HOME/.bash/style"

colors='black red green yellow blue magenta cyan white'

heading() {
    echo
    style lyellow,underline "$(printf ' %-142s ' "$1")"
    echo
}

assert-style() {
    local command=$1
    local expected=$2

    local result
    result=$(eval "$command")

    if [[ "$result" = "$expected" ]]; then
        echo -e "\e[92m[ OK ]\e[0m $result"
    else
        echo -e "\e[91m[FAIL]\e[0m Result '$result' (\e[90m${result//$'\e'/\\\\e}\e[0m) doesn't match expectation '$expected'"
        assertions_passed=false
    fi
}

color-line() {
    local style=${1:-}
    local prefix=${2:-}

    local color
    for color in $colors; do
        style -n "$style,$prefix$color" " $(printf '%-11s' "$prefix$color") "
    done
}

color-cube() {
    local type=$1
    shift

    local color
    for color in "$@"; do
        style -n "bg=auto,fg=auto,$type=$color" "$(printf ' %-6s ' "$type=$color")"
    done
    echo
}

heading 'Unit Tests'
assertions_passed=true
assert-style 'style green Green' $'\e[0m\e[32mGreen\e[0m'
assert-style 'style lwhite,bg=red White on red' $'\e[0m\e[97m\e[41mWhite on red\e[0m'
assert-style 'style lwhite,bold Bold white' $'\e[0m\e[97m\e[1mBold white\e[0m'
assert-style 'style lwhite white not parsed' $'\e[0m\e[97mwhite not parsed\e[0m'
assert-style 'style lwhite "Quoted  Text"' $'\e[0m\e[97mQuoted  Text\e[0m'
assert-style 'style fg=auto,bg=blue Auto foreground white on blue' $'\e[0m\e[97m\e[44mAuto foreground white on blue\e[0m'
assert-style 'style fg=auto,bg=lyellow Auto foreground black on yellow' $'\e[0m\e[30m\e[103mAuto foreground black on yellow\e[0m'
assert-style 'style lyellow,bg=auto Auto background yellow on black' $'\e[0m\e[93m\e[40mAuto background yellow on black\e[0m'
assert-style 'style black,bg=auto Auto background black on white' $'\e[0m\e[30m\e[47mAuto background black on white\e[0m'
assert-style 'style red,underline,bg=auto Auto background red underline' $'\e[0m\e[31m\e[4m\e[40mAuto background red underline\e[0m'

if ! $assertions_passed; then
    exit 1
fi

echo

heading 'Foreground'
color-line bg=auto
echo " - $(style lyellow bg=auto)"
color-line bg=auto l
echo
echo
style bg=auto,fg=grey ' grey=lblack'

heading 'Background'
color-line fg=auto bg=
echo " - $(style lyellow fg=auto)"
color-line fg=auto bg=l
echo

heading 'Styles'
for style in bold dim italic underline blink rapidblink reverse hide strike; do
    color-line "bg=auto,$style"
    echo -n ' - '
    style lyellow "$(printf '%-10s' $style)"
done

heading '256 colors (text)'
color-cube fg {0..7}
color-cube fg {8..15}
echo
color-cube fg  {16..21}   {52..57}   {88..93}
color-cube fg  {22..27}   {58..63}   {94..99}
color-cube fg  {28..33}   {64..69}  {100..105}
color-cube fg  {34..39}   {70..75}  {106..111}
color-cube fg  {40..45}   {76..81}  {112..117}
color-cube fg  {46..51}   {82..87}  {118..123}
color-cube fg {124..129} {160..165} {196..201}
color-cube fg {130..135} {166..171} {202..207}
color-cube fg {136..141} {172..177} {208..213}
color-cube fg {142..147} {178..183} {214..219}
color-cube fg {148..153} {184..189} {220..225}
color-cube fg {154..159} {190..195} {226..231}
echo
color-cube fg {232..243}
color-cube fg {244..255}

heading '256 colors (background)'
color-cube bg {0..7}
color-cube bg {8..15}
echo
color-cube bg  {16..21}   {52..57}   {88..93}
color-cube bg  {22..27}   {58..63}   {94..99}
color-cube bg  {28..33}   {64..69}  {100..105}
color-cube bg  {34..39}   {70..75}  {106..111}
color-cube bg  {40..45}   {76..81}  {112..117}
color-cube bg  {46..51}   {82..87}  {118..123}
color-cube bg {124..129} {160..165} {196..201}
color-cube bg {130..135} {166..171} {202..207}
color-cube bg {136..141} {172..177} {208..213}
color-cube bg {142..147} {178..183} {214..219}
color-cube bg {148..153} {184..189} {220..225}
color-cube bg {154..159} {190..195} {226..231}
echo
color-cube bg {232..243}
color-cube bg {244..255}

heading '24-bit color'
color-cube fg '#fe7' '#fc6' '#fa5' '#c84' '#963' '#642' '#321' '#000' '#123' '#246' '#369' '#48c' '#5af' '#6cf' '#7ef'
color-cube bg '#fe7' '#fc6' '#fa5' '#c84' '#963' '#642' '#321' '#000' '#123' '#246' '#369' '#48c' '#5af' '#6cf' '#7ef'
echo
color-cube fg '#000000' '#203000' '#306010' '#407020' '#508030' '#609040' '#70a050' '#80b060' '#90c070' '#a0d080' '#ffffff'
color-cube bg '#000000' '#203000' '#306010' '#407020' '#508030' '#609040' '#70a050' '#80b060' '#90c070' '#a0d080' '#ffffff'
