#!/usr/bin/env bash
set -euo pipefail

# Parse arguments
exe=$(basename "$0")

help() {
    echo "Usage: $exe [options]"
    echo
    echo "Install Certbot and configure it for Cloudflare."
    echo
    echo "Options:"
    echo "  -h, --help      display this help"
    echo "  -r, --revert    uninstall everything"
    echo "  -s, --staging   use the Let's Encrypt staging server"
}

args=$(getopt -n "$exe" -o 'hrs' -l 'help,revert,staging' -- "$@")
eval set -- "$args"

revert=false
staging=false

while true; do
    case "$1" in
        -h | --help)    help; exit ;;
        -r | --revert)  revert=true; shift ;;
        -s | --staging) staging=true; shift ;;
        --)             shift; break ;;
    esac
done

# Revert
if $revert; then
    ask 'Are you sure you want to uninstall Certbot?' N || exit
    echo

    if [[ -f /etc/apache2/conf-enabled/z_dave-ssl.conf ]]; then
        style lcyan,bold 'Reverting Apache configuration...'
        sudo-write /etc/apache2/conf-enabled/z_dave-ssl.conf <~/.templates/apache/ssl-snakeoil.conf
        sudo systemctl reload apache2
        sudo systemctl status apache2
        echo
    fi

    style lcyan,bold 'Removing Certbot...'
    sudo snap remove certbot certbot-dns-cloudflare
    echo

    style lcyan,bold 'Removing configuration files...'
    if ask 'Delete all Certbot configuration, including account credentials and certificates?'; then
        sudo rm -rfv /etc/letsencrypt/
    elif ask 'Delete Cloudflare credentials?' Y; then
        sudo rm -fv /etc/letsencrypt/cloudflare-credentials.ini
    fi
    echo

    style lcyan,bold 'Done.'
    exit
fi

# Install Certbot
style lcyan,bold 'Installing Certbot...'
sudo apt install -y snapd
sudo snap install --classic certbot
sudo snap set certbot trust-plugin-with-root=ok
sudo snap install certbot-dns-cloudflare
echo

# Save Cloudflare API credentials
style lcyan,bold 'Configuring Cloudflare API credentials...'

if [[ -f /etc/letsencrypt/cloudflare-credentials.ini ]]; then
    echo "Credentials are already configured in '/etc/letsencrypt/cloudflare-credentials.ini'."
else
    echo 'You will need a Cloudflare API token with Zone:DNS:Edit permission for the relevant zone(s).'
    echo 'Visit https://dash.cloudflare.com/profile/api-tokens to create a new token.'
    echo

    # Prompt for input
    while true; do
        api_token=''
        while [[ -z "$api_token" ]]; do
            read -rsp 'Enter API token (not displayed): ' api_token
            echo
        done

        # Check the token is valid
        # Note: We don't check the token's permissions - that can be changed later
        curl -fs "https://api.cloudflare.com/client/v4/user/tokens/verify" \
            -H "Authorization: Bearer $api_token" \
            -H "Content-Type:application/json" >/dev/null \
            && break

        echo 'Invalid token.' >&2
    done

    # Save credentials in a file
    sudo mkdir -p /etc/letsencrypt
    echo "dns_cloudflare_api_token = $api_token" | sudo-write /etc/letsencrypt/cloudflare-credentials.ini
    sudo chmod 600 /etc/letsencrypt/cloudflare-credentials.ini
fi

echo

# Header
style lcyan,bold 'Generating certificate...'

staging_flag=''
if $staging; then
    style yellow "Using Let's Encrypt staging server"
    staging_flag='--staging'
fi

# Prompt for list of domains
hostname=$(hostname -f)

default_domains="$(
    (
        # Try to determine what's in the existing certificate, if there is one
        sudo cat /etc/letsencrypt/live/default/cert.pem 2>/dev/null \
        | openssl x509 -text \
        | sed -nE 's/^\s+DNS:(.*)$/\1/ p' \
        | sed 's/DNS://g'
    ) 2>/dev/null || true
)"

if [[ -z $default_domains ]]; then
    default_domains="$hostname, *.$hostname"
fi

read -rp "Enter domain names [$default_domains]: " domains

if [[ -z $domains ]]; then
    domains=$default_domains
fi

echo

# Run Certbot
sudo certbot certonly \
    $staging_flag \
    --non-interactive \
    --cert-name default \
    --domains "$domains" \
    --dns-cloudflare \
    --dns-cloudflare-credentials /etc/letsencrypt/cloudflare-credentials.ini \
    --dns-cloudflare-propagation-seconds 30 \
    --email "$(git config --get user.email)" \
    --agree-tos

echo

# Configure Apache
style lcyan,bold 'Configuring Apache...'

if [[ -d /etc/apache2/conf-enabled ]]; then
    sudo-write /etc/apache2/conf-enabled/z_dave-ssl.conf <~/.templates/apache/ssl-certbot.conf
    sudo systemctl reload apache2
    sudo systemctl status apache2
else
    echo 'Not installed.'
fi

echo

# Configure renewal hook
style lcyan,bold 'Configuring renewal hook...'
sudo-write /etc/letsencrypt/renewal-hooks/deploy/dave.sh <~/.templates/certbot/deploy.sh
sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/dave.sh
echo

# Done
style lcyan,bold 'Done.'
