#!/bin/bash

#================================================================================
# USAGE:
# wget djm.me/cfg
# . cfg
#================================================================================

# Run this in a sub-process
(
    set -o errexit -o pipefail -o nounset

    # Should be in home directory anyway, but just in case...
    cd

    # WSL defaults to umask 000
    umask 022

    # Helpers
    say() {
        echo -en "\e[94m" # Light blue
        echo -n "$1"
        echo -e "\e[0m"
    }

    fail() {
        echo >&2 -en "\e[91m" # Light red
        echo >&2 -n "$1"
        echo >&2 -e "\e[0m"
        exit 1
    }

    # Sanity checks
    [ -f cfg ] || fail 'This script must be named ~/cfg'
    [ -d .git ] && fail '~/.git already exists'

    # Check git is available
    if ! command -v git >/dev/null; then
        # Attempt to install it if not
        say 'Installing Git'
        if ! (sudo apt-get update && sudo apt-get install -y git); then
            fail 'Git could not be installed'
        fi
    fi

    # Ensure SSH keys are loaded
    say 'Checking for SSH keys'

    if grep -q 'WSL\|Microsoft' /proc/version && [ -z "${SSH_AUTH_SOCK:-}" ]; then
        TEMP=$(cd /mnt/c && cmd.exe /C 'echo %TEMP%' | tr -d '\r')
        TEMP=$(wslpath "$TEMP")
        if [ -f "$TEMP/wsl-ssh-pageant.sock" ]; then
            export SSH_AUTH_SOCK="$TEMP/wsl-ssh-pageant.sock"
        fi
    fi

    if ! ssh-add -l >/dev/null; then
        fail 'SSH key not found'
    fi

    # Add SSH public key
    say 'Adding SSH public key'
    mkdir -p .ssh
    chmod 700 .ssh
    echo 'djm.me ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJmp1lkU67D50pSpn0JUDo/GJse+jOzYg0bE9Gxr+Acu' >> .ssh/known_hosts
    echo 'djm.me ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNhNN8fpgK46rNG2gdYjaYUx/oCHRf3GpS4ggwEjkjaaQxsQb0kkXnmrlqb+EV/CEvkG7oRDqqCtthEQDrhkyZo=' >> .ssh/known_hosts
    echo 'djm.me ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClC2+HP3+3pGEZbeI4EPxEPCfKqy6S2SDfhHP+hzv0dW7dO3B5kC0xoUl9BdGcRQ+G99NhNUvuAjuOCU88VuTajfKJQq95Sk1laGsrc6HUrLUnEow1rK+jo5mwArARPkvD0cU4Gmpvn6XOKTJQcvz5uNA/KA6ZXMracqo4kFHRAde+/2L5DizjwE2Eik9k9oOcamU6lE4kcJdJFj7HVRs553QClAzYJfmJSNMsr8Noyl4Vw5Mhn2Ho+3njgM1BvFyphC5NSHW7mOL3OCBANNlYZWer7tR6lHjQwjAuZezN7vl0WiVleFiX4Wju8hRxC/7CX1Kvr9jYjzSxOGytpVGz0+OA5T8nHueOS/MibT/87miGdOIE8m8lv9ll5tK9QotehP5JZrzI+9+BX0L0/zTpi/Jt3eRhbhUV7HZbhwZwIUT0AxqOln6aTvZy+UNYk5D1MdcIEQ4lfM1YUgEU3lUmQ7W9Gwb651of9KnqtjpHw1SyfPoQalGyM4KofifyE2s=' >> .ssh/known_hosts
    chmod 600 .ssh/known_hosts

    # Download the repository
    say 'Downloading dotfiles repository'
    git init || fail 'Failed to initialise the Git repo'
    git remote add origin 'git@djm.me:dave/dotfiles.git' || fail 'Failed to configure the Git remote'
    git fetch --depth=1 origin || fail 'Failed to download the Git repository'

    # Check out the files
    say 'Checking out files'
    git checkout -f origin/master -b master

    # Remove this script
    # (Note: $0 is not set because we 'source' this file)
    say "Removing the 'cfg' bootstrap script"
    rm -f cfg

    # Run any post-install commands, e.g. prepare config file
    say 'Running post-install script'
) && exec ~/.dotfiles/post-install
